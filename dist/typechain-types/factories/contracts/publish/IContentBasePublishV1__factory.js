"use strict";
/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
Object.defineProperty(exports, "__esModule", { value: true });
exports.IContentBasePublishV1__factory = void 0;
const ethers_1 = require("ethers");
const _abi = [
    {
        inputs: [
            {
                components: [
                    {
                        internalType: "uint256",
                        name: "creatorId",
                        type: "uint256",
                    },
                    {
                        internalType: "string",
                        name: "imageURI",
                        type: "string",
                    },
                    {
                        internalType: "string",
                        name: "contentURI",
                        type: "string",
                    },
                    {
                        internalType: "string",
                        name: "metadataURI",
                        type: "string",
                    },
                    {
                        internalType: "string",
                        name: "title",
                        type: "string",
                    },
                    {
                        internalType: "string",
                        name: "description",
                        type: "string",
                    },
                    {
                        internalType: "enum DataTypes.Category",
                        name: "primaryCategory",
                        type: "uint8",
                    },
                    {
                        internalType: "enum DataTypes.Category",
                        name: "secondaryCategory",
                        type: "uint8",
                    },
                    {
                        internalType: "enum DataTypes.Category",
                        name: "tertiaryCategory",
                        type: "uint8",
                    },
                ],
                internalType: "struct DataTypes.CreatePublishData",
                name: "createPublishData",
                type: "tuple",
            },
        ],
        name: "createPublish",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "uint256",
                name: "tokenId",
                type: "uint256",
            },
            {
                internalType: "uint256",
                name: "creatorId",
                type: "uint256",
            },
        ],
        name: "deletePublish",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function",
    },
    {
        inputs: [],
        name: "getProfileContract",
        outputs: [
            {
                internalType: "address",
                name: "",
                type: "address",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "uint256",
                name: "tokenId",
                type: "uint256",
            },
        ],
        name: "getPublishById",
        outputs: [
            {
                components: [
                    {
                        internalType: "address",
                        name: "owner",
                        type: "address",
                    },
                    {
                        internalType: "uint256",
                        name: "creatorId",
                        type: "uint256",
                    },
                    {
                        internalType: "string",
                        name: "imageURI",
                        type: "string",
                    },
                    {
                        internalType: "string",
                        name: "contentURI",
                        type: "string",
                    },
                    {
                        internalType: "string",
                        name: "metadataURI",
                        type: "string",
                    },
                ],
                internalType: "struct DataTypes.Publish",
                name: "",
                type: "tuple",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "uint256",
                name: "publishId",
                type: "uint256",
            },
        ],
        name: "publishExist",
        outputs: [
            {
                internalType: "bool",
                name: "",
                type: "bool",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "uint256",
                name: "publishId",
                type: "uint256",
            },
        ],
        name: "publishOwner",
        outputs: [
            {
                internalType: "address",
                name: "",
                type: "address",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "contractAddress",
                type: "address",
            },
        ],
        name: "updateProfileContract",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function",
    },
    {
        inputs: [
            {
                components: [
                    {
                        internalType: "uint256",
                        name: "tokenId",
                        type: "uint256",
                    },
                    {
                        internalType: "uint256",
                        name: "creatorId",
                        type: "uint256",
                    },
                    {
                        internalType: "string",
                        name: "imageURI",
                        type: "string",
                    },
                    {
                        internalType: "string",
                        name: "contentURI",
                        type: "string",
                    },
                    {
                        internalType: "string",
                        name: "metadataURI",
                        type: "string",
                    },
                    {
                        internalType: "string",
                        name: "title",
                        type: "string",
                    },
                    {
                        internalType: "string",
                        name: "description",
                        type: "string",
                    },
                    {
                        internalType: "enum DataTypes.Category",
                        name: "primaryCategory",
                        type: "uint8",
                    },
                    {
                        internalType: "enum DataTypes.Category",
                        name: "secondaryCategory",
                        type: "uint8",
                    },
                    {
                        internalType: "enum DataTypes.Category",
                        name: "tertiaryCategory",
                        type: "uint8",
                    },
                ],
                internalType: "struct DataTypes.UpdatePublishData",
                name: "updatePublishData",
                type: "tuple",
            },
        ],
        name: "updatePublish",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function",
    },
];
class IContentBasePublishV1__factory {
    static createInterface() {
        return new ethers_1.utils.Interface(_abi);
    }
    static connect(address, signerOrProvider) {
        return new ethers_1.Contract(address, _abi, signerOrProvider);
    }
}
exports.IContentBasePublishV1__factory = IContentBasePublishV1__factory;
IContentBasePublishV1__factory.abi = _abi;
