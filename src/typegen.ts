/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import type { Context } from "./context"
import type { core } from "nexus"
declare global {
  interface NexusGenCustomInputMethods<TypeName extends string> {
    /**
     * A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    date<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "DateTime";
  }
}
declare global {
  interface NexusGenCustomOutputMethods<TypeName extends string> {
    /**
     * A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    date<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "DateTime";
  }
}


declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
}

export interface NexusGenEnums {
  Category: "Animals" | "Children" | "Education" | "Empty" | "Entertainment" | "Food" | "Gaming" | "LifeStyle" | "Men" | "Movies" | "Music" | "News" | "NotExist" | "Other" | "Programming" | "Science" | "Sports" | "Technology" | "Travel" | "Vehicles" | "Women"
  CommentType: "COMMENT" | "PUBLISH"
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
  DateTime: any
}

export interface NexusGenObjects {
  Account: { // root type
    address: string; // String!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    id: number; // Int!
    updatedAt?: NexusGenScalars['DateTime'] | null; // DateTime
  }
  AccountProfile: { // root type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    default: boolean; // Boolean!
    id: number; // Int!
    imageURI?: string | null; // String
    originalHandle: string; // String!
    tokenId: string; // String!
  }
  Edge: { // root type
    cursor?: string | null; // String
    node?: NexusGenRootTypes['Profile'] | null; // Profile
  }
  Follow: { // root type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    id: number; // Int!
    imageURI?: string | null; // String
    originalHandle: string; // String!
    tokenId: string; // String!
  }
  MainComment: { // root type
    commentType: NexusGenEnums['CommentType']; // CommentType!
    contentURI: string; // String!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    id: number; // Int!
    mediaURI?: string | null; // String
    text?: string | null; // String
    tokenId: string; // String!
    updatedAt?: NexusGenScalars['DateTime'] | null; // DateTime
  }
  PageInfo: { // root type
    endCursor?: string | null; // String
    hasNextPage?: boolean | null; // Boolean
  }
  Profile: { // root type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    default: boolean; // Boolean!
    handle: string; // String!
    id: number; // Int!
    imageURI?: string | null; // String
    originalHandle: string; // String!
    owner: string; // String!
    tokenId: string; // String!
    updatedAt?: NexusGenScalars['DateTime'] | null; // DateTime
  }
  Publish: { // root type
    contentURI: string; // String!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    id: number; // Int!
    imageURI: string; // String!
    primaryCategory: NexusGenEnums['Category']; // Category!
    secondaryCategory: NexusGenEnums['Category']; // Category!
    tertiaryCategory: NexusGenEnums['Category']; // Category!
    title: string; // String!
    tokenId: string; // String!
    updatedAt?: NexusGenScalars['DateTime'] | null; // DateTime
  }
  PublishDetail: { // root type
    contentURI: string; // String!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    description?: string | null; // String
    id: number; // Int!
    imageURI: string; // String!
    metadataURI: string; // String!
    primaryCategory: NexusGenEnums['Category']; // Category!
    secondaryCategory: NexusGenEnums['Category']; // Category!
    tertiaryCategory: NexusGenEnums['Category']; // Category!
    title: string; // String!
    tokenId: string; // String!
    updatedAt?: NexusGenScalars['DateTime'] | null; // DateTime
  }
  Query: {};
  Response: { // root type
    edges: Array<NexusGenRootTypes['Edge'] | null>; // [Edge]!
    pageInfo: NexusGenRootTypes['PageInfo']; // PageInfo!
  }
  ShortProfile: { // root type
    id: number; // Int!
    imageURI?: string | null; // String
    originalHandle: string; // String!
  }
  SubComment: { // root type
    commentType: NexusGenEnums['CommentType']; // CommentType!
    contentURI: string; // String!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    id: number; // Int!
    mediaURI?: string | null; // String
    text?: string | null; // String
    tokenId: string; // String!
    updatedAt?: NexusGenScalars['DateTime'] | null; // DateTime
  }
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars & NexusGenEnums

export interface NexusGenFieldTypes {
  Account: { // field return type
    address: string; // String!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    id: number; // Int!
    profiles: Array<NexusGenRootTypes['AccountProfile'] | null>; // [AccountProfile]!
    updatedAt: NexusGenScalars['DateTime'] | null; // DateTime
  }
  AccountProfile: { // field return type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    default: boolean; // Boolean!
    id: number; // Int!
    imageURI: string | null; // String
    originalHandle: string; // String!
    tokenId: string; // String!
  }
  Edge: { // field return type
    cursor: string | null; // String
    node: NexusGenRootTypes['Profile'] | null; // Profile
  }
  Follow: { // field return type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    id: number; // Int!
    imageURI: string | null; // String
    originalHandle: string; // String!
    tokenId: string; // String!
  }
  MainComment: { // field return type
    commentType: NexusGenEnums['CommentType']; // CommentType!
    comments: Array<NexusGenRootTypes['SubComment'] | null>; // [SubComment]!
    contentURI: string; // String!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    creator: NexusGenRootTypes['ShortProfile'] | null; // ShortProfile
    disLikes: Array<number | null>; // [Int]!
    id: number; // Int!
    likes: Array<NexusGenRootTypes['ShortProfile'] | null>; // [ShortProfile]!
    mediaURI: string | null; // String
    text: string | null; // String
    tokenId: string; // String!
    updatedAt: NexusGenScalars['DateTime'] | null; // DateTime
  }
  PageInfo: { // field return type
    endCursor: string | null; // String
    hasNextPage: boolean | null; // Boolean
  }
  Profile: { // field return type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    default: boolean; // Boolean!
    followers: Array<NexusGenRootTypes['Follow'] | null>; // [Follow]!
    following: Array<NexusGenRootTypes['Follow'] | null>; // [Follow]!
    handle: string; // String!
    id: number; // Int!
    imageURI: string | null; // String
    originalHandle: string; // String!
    owner: string; // String!
    tokenId: string; // String!
    updatedAt: NexusGenScalars['DateTime'] | null; // DateTime
  }
  Publish: { // field return type
    contentURI: string; // String!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    creator: NexusGenRootTypes['ShortProfile'] | null; // ShortProfile
    id: number; // Int!
    imageURI: string; // String!
    primaryCategory: NexusGenEnums['Category']; // Category!
    secondaryCategory: NexusGenEnums['Category']; // Category!
    tertiaryCategory: NexusGenEnums['Category']; // Category!
    title: string; // String!
    tokenId: string; // String!
    updatedAt: NexusGenScalars['DateTime'] | null; // DateTime
  }
  PublishDetail: { // field return type
    comments: Array<NexusGenRootTypes['MainComment'] | null>; // [MainComment]!
    contentURI: string; // String!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    creator: NexusGenRootTypes['ShortProfile'] | null; // ShortProfile
    description: string | null; // String
    disLikes: Array<number | null>; // [Int]!
    id: number; // Int!
    imageURI: string; // String!
    likes: Array<NexusGenRootTypes['ShortProfile'] | null>; // [ShortProfile]!
    metadataURI: string; // String!
    primaryCategory: NexusGenEnums['Category']; // Category!
    secondaryCategory: NexusGenEnums['Category']; // Category!
    tertiaryCategory: NexusGenEnums['Category']; // Category!
    title: string; // String!
    tokenId: string; // String!
    updatedAt: NexusGenScalars['DateTime'] | null; // DateTime
  }
  Query: { // field return type
    fetchPublishes: Array<NexusGenRootTypes['Publish'] | null>; // [Publish]!
    getAccount: NexusGenRootTypes['Account'] | null; // Account
    getCommentsByPublishId: Array<NexusGenRootTypes['MainComment'] | null>; // [MainComment]!
    getProfile: NexusGenRootTypes['Profile'] | null; // Profile
    getPublishById: NexusGenRootTypes['PublishDetail'] | null; // PublishDetail
    publishedByCategory: Array<NexusGenRootTypes['Publish'] | null>; // [Publish]!
  }
  Response: { // field return type
    edges: Array<NexusGenRootTypes['Edge'] | null>; // [Edge]!
    pageInfo: NexusGenRootTypes['PageInfo']; // PageInfo!
  }
  ShortProfile: { // field return type
    id: number; // Int!
    imageURI: string | null; // String
    originalHandle: string; // String!
  }
  SubComment: { // field return type
    commentType: NexusGenEnums['CommentType']; // CommentType!
    contentURI: string; // String!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    creator: NexusGenRootTypes['ShortProfile'] | null; // ShortProfile
    disLikes: Array<number | null>; // [Int]!
    id: number; // Int!
    likes: Array<NexusGenRootTypes['ShortProfile'] | null>; // [ShortProfile]!
    mediaURI: string | null; // String
    text: string | null; // String
    tokenId: string; // String!
    updatedAt: NexusGenScalars['DateTime'] | null; // DateTime
  }
}

export interface NexusGenFieldTypeNames {
  Account: { // field return type name
    address: 'String'
    createdAt: 'DateTime'
    id: 'Int'
    profiles: 'AccountProfile'
    updatedAt: 'DateTime'
  }
  AccountProfile: { // field return type name
    createdAt: 'DateTime'
    default: 'Boolean'
    id: 'Int'
    imageURI: 'String'
    originalHandle: 'String'
    tokenId: 'String'
  }
  Edge: { // field return type name
    cursor: 'String'
    node: 'Profile'
  }
  Follow: { // field return type name
    createdAt: 'DateTime'
    id: 'Int'
    imageURI: 'String'
    originalHandle: 'String'
    tokenId: 'String'
  }
  MainComment: { // field return type name
    commentType: 'CommentType'
    comments: 'SubComment'
    contentURI: 'String'
    createdAt: 'DateTime'
    creator: 'ShortProfile'
    disLikes: 'Int'
    id: 'Int'
    likes: 'ShortProfile'
    mediaURI: 'String'
    text: 'String'
    tokenId: 'String'
    updatedAt: 'DateTime'
  }
  PageInfo: { // field return type name
    endCursor: 'String'
    hasNextPage: 'Boolean'
  }
  Profile: { // field return type name
    createdAt: 'DateTime'
    default: 'Boolean'
    followers: 'Follow'
    following: 'Follow'
    handle: 'String'
    id: 'Int'
    imageURI: 'String'
    originalHandle: 'String'
    owner: 'String'
    tokenId: 'String'
    updatedAt: 'DateTime'
  }
  Publish: { // field return type name
    contentURI: 'String'
    createdAt: 'DateTime'
    creator: 'ShortProfile'
    id: 'Int'
    imageURI: 'String'
    primaryCategory: 'Category'
    secondaryCategory: 'Category'
    tertiaryCategory: 'Category'
    title: 'String'
    tokenId: 'String'
    updatedAt: 'DateTime'
  }
  PublishDetail: { // field return type name
    comments: 'MainComment'
    contentURI: 'String'
    createdAt: 'DateTime'
    creator: 'ShortProfile'
    description: 'String'
    disLikes: 'Int'
    id: 'Int'
    imageURI: 'String'
    likes: 'ShortProfile'
    metadataURI: 'String'
    primaryCategory: 'Category'
    secondaryCategory: 'Category'
    tertiaryCategory: 'Category'
    title: 'String'
    tokenId: 'String'
    updatedAt: 'DateTime'
  }
  Query: { // field return type name
    fetchPublishes: 'Publish'
    getAccount: 'Account'
    getCommentsByPublishId: 'MainComment'
    getProfile: 'Profile'
    getPublishById: 'PublishDetail'
    publishedByCategory: 'Publish'
  }
  Response: { // field return type name
    edges: 'Edge'
    pageInfo: 'PageInfo'
  }
  ShortProfile: { // field return type name
    id: 'Int'
    imageURI: 'String'
    originalHandle: 'String'
  }
  SubComment: { // field return type name
    commentType: 'CommentType'
    contentURI: 'String'
    createdAt: 'DateTime'
    creator: 'ShortProfile'
    disLikes: 'Int'
    id: 'Int'
    likes: 'ShortProfile'
    mediaURI: 'String'
    text: 'String'
    tokenId: 'String'
    updatedAt: 'DateTime'
  }
}

export interface NexusGenArgTypes {
  Query: {
    getAccount: { // args
      address: string; // String!
    }
    getCommentsByPublishId: { // args
      publishId: number; // Int!
    }
    getProfile: { // args
      id: number; // Int!
    }
    getPublishById: { // args
      id: number; // Int!
    }
    publishedByCategory: { // args
      category: NexusGenEnums['Category']; // Category!
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = never;

export type NexusGenEnumNames = keyof NexusGenEnums;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}