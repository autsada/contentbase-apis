### This file was generated by Nexus Schema
### Do not make changes to this file directly


type Account {
  address: String!
  createdAt: DateTime!
  id: Int!
  profiles: [Profile]!
  type: AccountType
  uid: String
  updatedAt: DateTime
}

enum AccountType {
  TRADITIONAL
  WALLET
}

enum Category {
  Animals
  Children
  Education
  Empty
  Entertainment
  Food
  Gaming
  LifeStyle
  Men
  Movies
  Music
  News
  NotExist
  Other
  Programming
  Science
  Sports
  Technology
  Travel
  Vehicles
  Women
}

type Comment {
  commentType: CommentType!
  comments: [Comment]!
  contentURI: String!
  createdAt: DateTime!
  creator: Profile
  disLiked: Boolean!
  disLikesCount: Int!
  id: Int!
  liked: Boolean!
  likes: [Profile]!
  likesCount: Int!
  text: String
  tokenId: String!
  updatedAt: DateTime
}

enum CommentType {
  COMMENT
  PUBLISH
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

type Edge {
  cursor: String
  node: Profile
}

type Fee {
  amount: String!
  fee: String!
  id: Int!
  publish: Publish!
  receiver: Profile
  sender: Profile
}

input GetProfileByIdInput {
  profileId: Int!
  userId: Int!
}

input GetPublishByIdInput {
  profileId: Int!
  publishId: Int!
}

input ListCommentsByPublishIdInput {
  profileId: Int!
  publishId: Int!
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean
}

type Profile {
  createdAt: DateTime!
  default: Boolean!
  followers: [Profile]!
  followersCount: Int
  following: [Profile]!
  followingCount: Int
  handle: String!
  id: Int!
  imageURI: String
  isFollowing: Boolean!
  originalHandle: String!
  owner: String!
  publishesCount: Int!
  tokenId: String!
  updatedAt: DateTime
}

type Publish {
  commentsCount: Int!
  contentURI: String!
  createdAt: DateTime!
  creator: Profile!
  creatorTokenId: String!
  description: String
  disLiked: Boolean!
  disLikes: [Profile]!
  disLikesCount: Int!
  id: Int!
  imageURI: String!
  lastComment: Comment
  liked: Boolean!
  likes: [Profile]!
  likesCount: Int!
  metadataURI: String!
  primaryCategory: Category!
  secondaryCategory: Category!
  tertiaryCategory: Category!
  title: String!
  tokenId: String!
  updatedAt: DateTime
  views: Int!
}

type Query {
  fetchPublishes: [Publish]!
  getAccount(address: String!): Account
  getProfileById(input: GetProfileByIdInput!): Profile
  getPublishById(input: GetPublishByIdInput!): Publish
  listCommentsByPublishId(input: ListCommentsByPublishIdInput!): [Comment]!
  listMostRecentPublishesByProfileId(id: Int!): [Publish]!
  listMostRecentPublishesByProfileTokenId(tokenId: String!): [Publish]!
  listPublishesByCategory(category: Category!): [Publish]!
  listPublishesByProfileId(id: Int!): [Publish]!
  listPublishesByProfileTokenId(tokenId: String!): [Publish]!
  listReceivedFees(profileId: Int!): [Fee]!
  listSentFees(profileId: Int!): [Fee]!
}

type Response {
  edges: [Edge]!
  pageInfo: PageInfo!
}