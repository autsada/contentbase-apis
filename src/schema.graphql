### This file was generated by Nexus Schema
### Do not make changes to this file directly


type Account {
  address: String!
  createdAt: DateTime!
  id: Int!
  profiles: [AccountProfile]!
  updatedAt: DateTime
}

type AccountProfile {
  createdAt: DateTime!
  default: Boolean!
  id: Int!
  imageURI: String
  originalHandle: String!
  tokenId: String!
}

enum Category {
  Animals
  Children
  Education
  Empty
  Entertainment
  Food
  Gaming
  LifeStyle
  Men
  Movies
  Music
  News
  NotExist
  Other
  Programming
  Science
  Sports
  Technology
  Travel
  Vehicles
  Women
}

type Comment {
  contentURI: String!
  createdAt: DateTime!
  id: Int!
  mediaURI: String
  text: String
  tokenId: String!
  updatedAt: DateTime
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

type Edge {
  cursor: String
  node: Profile
}

type Follow {
  createdAt: DateTime!
  id: Int!
  imageURI: String
  originalHandle: String!
  tokenId: String!
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean
}

type Profile {
  createdAt: DateTime!
  default: Boolean!
  followers: [Follow]!
  following: [Follow]!
  handle: String!
  id: Int!
  imageURI: String
  originalHandle: String!
  owner: String!
  tokenId: String!
  updatedAt: DateTime
}

type Publish {
  contentURI: String!
  createdAt: DateTime!
  creator: ShortProfile
  id: Int!
  imageURI: String!
  primaryCategory: Category!
  secondaryCategory: Category!
  tertiaryCategory: Category!
  title: String!
  tokenId: String!
  updatedAt: DateTime
}

type PublishDetail {
  contentURI: String!
  createdAt: DateTime!
  creator: ShortProfile
  description: String
  disLikes: [ShortProfile]!
  id: Int!
  imageURI: String!
  likes: [ShortProfile]!
  metadataURI: String!
  primaryCategory: Category!
  secondaryCategory: Category!
  tertiaryCategory: Category!
  title: String!
  tokenId: String!
  updatedAt: DateTime
}

type Query {
  fetchPublishes: [Publish]!
  getAccount(address: String!): Account
  getProfile(id: Int!): Profile
  getPublishById(id: Int!): PublishDetail
}

type Response {
  edges: [Edge]!
  pageInfo: PageInfo!
}

type ShortProfile {
  id: Int!
  imageURI: String
  originalHandle: String!
  tokenId: String!
}