// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum AccountType {
  TRADITIONAL
  WALLET
}

model Account {
  id        Int          @id @default(autoincrement())
  createdAt DateTime
  updatedAt DateTime?
  address   String       @unique // EOA address
  uid       String?      @unique
  type      AccountType?
  profiles  Profile[]
}

model Profile {
  id             Int           @id @default(autoincrement())
  tokenId        String        @unique
  createdAt      DateTime
  updatedAt      DateTime?
  account        Account       @relation(fields: [accountId], references: [id], onDelete: Cascade)
  accountId      Int
  owner          String // EOA Address
  handle         String        @unique
  originalHandle String
  imageURI       String?
  default        Boolean
  followers      Follow[]      @relation("Followee")
  following      Follow[]      @relation("Follower")
  publishes      Publish[]
  comments       Comment[]
  likes          Like[]
  disLikes       DisLike[]
  sentFees       LikeFee[]     @relation("Sent")
  receivedFees   LikeFee[]     @relation("Received")
  CommentLike    CommentLike[]
}

model Follow {
  tokenId    String   @unique
  createdAt  DateTime
  follower   Profile  @relation("Follower", fields: [followerId], references: [id], onDelete: Cascade)
  followerId Int
  followee   Profile  @relation("Followee", fields: [followeeId], references: [id], onDelete: Cascade)
  followeeId Int

  @@id([followerId, followeeId])
}

enum Category {
  Empty
  Music
  Movies
  Entertainment
  Sports
  Food
  Travel
  Gaming
  News
  Animals
  Education
  Science
  Technology
  Programming
  LifeStyle
  Vehicles
  Children
  Women
  Men
  Other
  NotExist
}

model Publish {
  id                Int       @id @default(autoincrement())
  tokenId           String    @unique
  createdAt         DateTime
  updatedAt         DateTime?
  creator           Profile   @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  creatorId         Int
  creatorTokenId    String
  imageURI          String
  contentURI        String
  metadataURI       String
  title             String
  description       String?
  views             Int
  primaryCategory   Category
  secondaryCategory Category
  tertiaryCategory  Category
  likeFees          LikeFee[]
  likes             Like[]
  disLikes          DisLike[]
  comments          Comment[] @relation("MainComment")
}

enum CommentType {
  PUBLISH
  COMMENT
}

// Publish's Comment
model Comment {
  id          Int              @id @default(autoincrement())
  tokenId     String           @unique
  createdAt   DateTime
  updatedAt   DateTime?
  creator     Profile          @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  creatorId   Int
  publish     Publish          @relation("MainComment", fields: [publishId], references: [id], onDelete: Cascade) // The publish that the comment belongs to.
  publishId   Int
  comment     Comment?         @relation("SubComment", fields: [commentId], references: [id], onDelete: Cascade) // The comment that the comment belongs to, if `null` it means the comment was made on a publish directly, otherwise it was made on a comment.
  commentId   Int?
  comments    Comment[]        @relation("SubComment") // The child comments
  contentURI  String
  text        String
  commentType CommentType
  likes       CommentLike[]
  disLikes    CommentDisLike[]
}

// Publish's Like
model Like {
  id        Int      @id @default(autoincrement())
  tokenId   String   @unique
  createdAt DateTime
  profile   Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)
  profileId Int
  publish   Publish  @relation(fields: [publishId], references: [id], onDelete: Cascade)
  publishId Int
  likeFee   LikeFee  @relation(fields: [likeFeeId], references: [id], onDelete: Cascade)
  likeFeeId Int      @unique

  @@unique(fields: [profileId, publishId], name: "identifier")
}

// Like's Fee
model LikeFee {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime
  like       Like?
  sender     Profile  @relation("Sent", fields: [senderId], references: [id])
  senderId   Int
  publish    Publish  @relation(fields: [publishId], references: [id])
  publishId  Int
  receiver   Profile  @relation("Received", fields: [receiverId], references: [id])
  receiverId Int
  amount     String // Use String for ether amount
  fee        String // Use String for ether amount
}

// Publish's DisLike
model DisLike {
  createdAt DateTime
  publish   Publish  @relation(fields: [publishId], references: [id], onDelete: Cascade)
  publishId Int
  profile   Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)
  profileId Int

  @@unique(fields: [publishId, profileId], name: "identifier")
}

// Comment's Like
model CommentLike {
  createdAt DateTime
  comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId Int
  profile   Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)
  profileId Int

  // @@id([commentId, profileId])
  @@unique(fields: [commentId, profileId], name: "identifier")
}

// Comment's DisLike
model CommentDisLike {
  createdAt DateTime
  comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId Int
  profileId Int

  // @@id([commentId, profileId])
  @@unique(fields: [commentId, profileId], name: "identifier")
}
