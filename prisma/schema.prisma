// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id        Int       @id @default(autoincrement())
  createdAt DateTime
  updatedAt DateTime?
  // EOA address
  address   String    @unique
  profiles  Profile[]
}

model Profile {
  id             Int          @id @default(autoincrement())
  tokenId        BigInt       @unique
  createdAt      DateTime
  updatedAt      DateTime?
  account        Account      @relation(fields: [accountId], references: [id])
  accountId      Int
  // EOA Address
  owner          String
  handle         String       @unique
  originalHandle String
  imageURI       String?
  default        Boolean
  revenue        String
  followers      Follow[]     @relation("Followee")
  following      Follow[]     @relation("Follower")
  publishes      Publish[]
  comments       Comment[]
  subComments    SubComment[]
  likes          Like[]
}

model Follow {
  tokenId    BigInt   @unique
  createdAt  DateTime
  follower   Profile  @relation("Follower", fields: [followerId], references: [id])
  followerId Int
  followee   Profile  @relation("Followee", fields: [followeeId], references: [id])
  followeeId Int

  @@id([followerId, followeeId])
}

// enum Category {
//   Empty
//   Music
//   Movies
//   Entertainment
//   Sports
//   Food
//   Travel
//   Gaming
//   News
//   Animals
//   Education
//   Science
//   Technology
//   Programming
//   LifeStyle
//   Vehicles
//   Children
//   Women
//   Men
//   Other
//   NotExist
// }

model Publish {
  id                Int       @id @default(autoincrement())
  tokenId           BigInt    @unique
  createdAt         DateTime
  updatedAt         DateTime?
  owner             String
  creator           Profile   @relation(fields: [creatorId], references: [id])
  creatorId         Int
  imageURI          String
  contentURI        String
  metadataURI       String
  title             String
  description       String?
  primaryCategory   Int
  secondaryCategory Int?
  tertiaryCategory  Int?
  // Use String for ethers amount.
  revenue           String
  likeTokens        Like[]
  likes             Int
  disLikes          Int
  comments          Comment[]
}

model Comment {
  id         Int          @id @default(autoincrement())
  tokenId    BigInt       @unique
  createdAt  DateTime
  updatedAt  DateTime?
  owner      String
  creator    Profile      @relation(fields: [creatorId], references: [id])
  creatorId  Int
  target     Publish      @relation(fields: [targetId], references: [id])
  targetId   Int
  contentURI String
  likes      Int
  disLikes   Int
  comments   SubComment[]
}

model SubComment {
  id         Int       @id @default(autoincrement())
  tokenId    BigInt    @unique
  createdAt  DateTime
  updatedAt  DateTime?
  owner      String
  creator    Profile   @relation(fields: [creatorId], references: [id])
  creatorId  Int
  target     Comment   @relation(fields: [targetId], references: [id])
  targetId   Int
  contentURI String
  likes      Int
  disLikes   Int
}

model Like {
  id        Int      @id @default(autoincrement())
  tokenId   BigInt   @unique
  createdAt DateTime
  profile   Profile  @relation(fields: [profileId], references: [id])
  profileId Int
  publish   Publish  @relation(fields: [publishId], references: [id])
  publishId Int
  // Use String for ethers amount
  fee       String
}
