// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id        Int       @id @default(autoincrement())
  createdAt DateTime
  updatedAt DateTime?
  address   String    @unique // EOA address
  profiles  Profile[]
}

model Profile {
  id             Int       @id @default(autoincrement())
  tokenId        BigInt    @unique
  createdAt      DateTime
  updatedAt      DateTime?
  account        Account   @relation(fields: [accountId], references: [id], onDelete: Cascade)
  accountId      Int
  owner          String // EOA Address
  handle         String    @unique
  originalHandle String
  imageURI       String?
  default        Boolean
  followers      Follow[]  @relation("Followee")
  following      Follow[]  @relation("Follower")
  publishes      Publish[]
  comments       Comment[]
  likes          Like[]
  disLikes       DisLike[]
  sentFees       Fee[]     @relation("Sent")
  receivedFees   Fee[]     @relation("Received")
}

model Follow {
  tokenId    BigInt   @unique
  createdAt  DateTime
  follower   Profile  @relation("Follower", fields: [followerId], references: [id], onDelete: Cascade)
  followerId Int
  followee   Profile  @relation("Followee", fields: [followeeId], references: [id], onDelete: Cascade)
  followeeId Int

  @@id([followerId, followeeId])
}

enum Category {
  Empty
  Music
  Movies
  Entertainment
  Sports
  Food
  Travel
  Gaming
  News
  Animals
  Education
  Science
  Technology
  Programming
  LifeStyle
  Vehicles
  Children
  Women
  Men
  Other
  NotExist
}

model Publish {
  id                Int       @id @default(autoincrement())
  tokenId           BigInt    @unique
  createdAt         DateTime
  updatedAt         DateTime?
  owner             String
  creator           Profile   @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  creatorId         Int
  imageURI          String
  contentURI        String
  metadataURI       String
  title             String
  description       String?
  primaryCategory   Category
  secondaryCategory Category?
  tertiaryCategory  Category?
  fees              Fee[]
  likes             Like[]
  disLikes          DisLike[]
  comments          Comment[]
}

enum CommentType {
  PUBLISH
  COMMENT
}

// Publish's Comment
model Comment {
  id          Int              @id @default(autoincrement())
  tokenId     BigInt           @unique
  createdAt   DateTime
  updatedAt   DateTime?
  owner       String
  creator     Profile          @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  creatorId   Int
  publish     Publish          @relation(fields: [publishId], references: [id], onDelete: Cascade) // The parent's publish
  publishId   Int
  comment     Comment?         @relation("CommentComments", fields: [commentId], references: [id], onDelete: Cascade) // The parent's comment, if `null` it means the comment was made on the parent's publish directly, otherwise it was made on a comment of the parent's publish.
  commentId   Int?
  comments    Comment[]        @relation("CommentComments") // The child comments
  commentType CommentType
  contentURI  String
  likes       CommentLike[]
  disLikes    CommentDisLike[]
}

// Publish's Like
model Like {
  id        Int      @id @default(autoincrement())
  tokenId   BigInt   @unique
  createdAt DateTime
  profile   Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)
  profileId Int
  publish   Publish  @relation(fields: [publishId], references: [id], onDelete: Cascade)
  publishId Int
  fee       Fee      @relation(fields: [feeId], references: [id], onDelete: Cascade)
  feeId     Int      @unique
}

// Like's Fee
model Fee {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime
  like       Like?
  sender     Profile  @relation("Sent", fields: [senderId], references: [id])
  senderId   Int
  publish    Publish  @relation(fields: [publishId], references: [id])
  publishId  Int
  receiver   Profile  @relation("Received", fields: [receiverId], references: [id])
  receiverId Int
}

// Publish's DisLike
model DisLike {
  id        Int     @id @default(autoincrement())
  publish   Publish @relation(fields: [publishId], references: [id], onDelete: Cascade)
  publishId Int
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
  profileId Int
}

// Comment's Like
model CommentLike {
  comment   Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId Int
  profileId Int

  // @@id([commentId, profileId])
  @@unique(fields: [commentId, profileId], name: "identifier")
}

// Comment's DisLike
model CommentDisLike {
  comment   Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId Int
  profileId Int

  // @@id([commentId, profileId])
  @@unique(fields: [commentId, profileId], name: "identifier")
}
